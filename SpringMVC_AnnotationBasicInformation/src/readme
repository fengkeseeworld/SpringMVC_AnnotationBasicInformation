				
				使用注解的方式配置SpringMVC的Controller
				1）加入jar包：
					commons-logging-1.1.3.jar
					spring-beans-3.2.2.RELEASE.jar
					spring-context-3.2.2.RELEASE.jar
					spring-core-3.2.2.RELEASE.jar
					spring-expression-3.2.2.RELEASE.jar
					spring-web-3.2.2.RELEASE.jar
					spring-webmvc-3.2.2.RELEASE.jar
					
					
				2）编写applicationContext.xml
					<?xml version="1.0" encoding="UTF-8"?>
					<beans 
					    xmlns="http://www.springframework.org/schema/beans" 
					    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
					    xmlns:p="http://www.springframework.org/schema/p" 
					    xmlns:context="http://www.springframework.org/schema/context"
					    xmlns:aop="http://www.springframework.org/schema/aop"
					    xmlns:tx="http://www.springframework.org/schema/tx"
					    xsi:schemaLocation="http://www.springframework.org/schema/beans 
					    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
					    http://www.springframework.org/schema/aop       
					    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
					    http://www.springframework.org/schema/tx 
					    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
					    http://www.springframework.org/schema/context 
					    http://www.springframework.org/schema/context/spring-context-3.0.xsd"
					    default-autowire="no" default-lazy-init="false" >
					    
					    <!-- 启动管理 -->
					    <context:annotation-config></context:annotation-config>
					    <!-- 不需要管理Controller -->
					    <context:component-scan base-package="fengke.springmvc.annotation">
					    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
					    </context:component-scan>
					
					</beans>
					
				
				
				3）编写springMVC-servlet.xml
						<?xml version="1.0" encoding="UTF-8" ?>
						<beans
						    xmlns="http://www.springframework.org/schema/beans"
						    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
						    xmlns:context="http://www.springframework.org/schema/context"
						    xmlns:mvc="http://www.springframework.org/schema/mvc"
						    xsi:schemaLocation="http://www.springframework.org/schema/beans 
						    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						    http://www.springframework.org/schema/mvc       
						    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
						    http://www.springframework.org/schema/context 
						    http://www.springframework.org/schema/context/spring-context-3.0.xsd"
						    >
						   <!-- 本配置文件是工名为springMVC的DispatcherServlet使用，提供其相关的Spring MVC配置 -->
						   <!-- 启用Spring基于annotation的DI，使用户可以在Spring MVC中使用Spring的强大功能
						   		激活：@Required @Autowired，JSR 250's @PostConstruct @PreDestroy and @Resource
						   		等标注
						    -->
						    <context:annotation-config></context:annotation-config>
						    
						    <!-- DispatcherServlet上下文,只管理@Controller类型的bean,忽略其他类型的bean，如@Service -->
						    <context:component-scan base-package="fengke.springmvc.annotation">
						    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
						    </context:component-scan>
						    
						    <!-- HandlerMapping，无需配置，Spring MVC可以默认启动 
						    	 DefaultAnnotationHandlerMappping annotation-driven HandlerMapping
						    -->
						    <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数-->
						    <mvc:annotation-driven/>
						    
						    <!-- 静态资源处理，css，js，imgs -->
						    <!-- 
						     <mvc:resources location="/resources/" mapping="/resources/**"/>
						     -->
						     
						     <!-- 配置ViewResolver
						     				可以用多个ViewResolver。
						     				使用order属性排序
						     				InternalResourceViewResolver放在最后。
						      -->
						      <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
						      		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
						      		<property name="prefix" value="/WEB-INF/jsps/"></property>
						      		<property name="suffix" value=".jsp"></property>
						      </bean>
						     
						    
						</beans>
						
				4）配置web.xml：
						<?xml version="1.0" encoding="UTF-8"?>
						<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
						  <display-name>SpringMVC_AnnotationBasicInformation</display-name>
						  <welcome-file-list>
						    <welcome-file>index.htm</welcome-file>
						  </welcome-file-list>
						  
						  <!-- Spring应用的上下文，层次化的ApplicationContext -->
						  <context-param>
						  		<param-name>contextConfigLocation</param-name>
						  		<param-value>/WEB-INF/application*.xml</param-value>
						  </context-param>
						  
						  <listener>
						  		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
						  </listener>
						  
						  
						  <!-- DispatcjerServlet,Spring MVC的核心 -->
						  <servlet>
						  <servlet-name>springMVC</servlet-name>
						  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
						  <!-- DispatcjerServlet对应的上下文配置，默认为/WEB-INF/$servlet-name$-servlet.xml -->
						  <init-param>
						  		<param-name>contextConfigLocation</param-name>
						  		<param-value>/WEB-INF/springMVC-servlet.xml</param-value>
						  </init-param>
						  <load-on-startup>1</load-on-startup>
						  </servlet>
						  
						  <servlet-mapping>
						  <servlet-name>springMVC</servlet-name>
						  <url-pattern>/</url-pattern>
						  </servlet-mapping>
						</web-app>
						
				5）constroller的内容：
					       /**
							 * 
							 */
							package fengke.springmvc.annotation.controller;
							
							import java.util.Map;
							import javax.servlet.http.HttpServletRequest;
							import org.springframework.beans.factory.annotation.Autowired;
							import org.springframework.stereotype.Controller;
							import org.springframework.ui.Model;
							import org.springframework.web.bind.annotation.PathVariable;
							import org.springframework.web.bind.annotation.RequestMapping;
							import org.springframework.web.bind.annotation.RequestMethod;
							import org.springframework.web.bind.annotation.RequestParam;
							import fengke.springmvc.annotation.model.Course;
							import fengke.springmvc.annotation.service.CourseService;
							
							@Controller
							@RequestMapping("/courses")
							public class CourseController {
								
								private CourseService courseService;
							
								@Autowired
								public void setCourseService(CourseService courseService) {
									this.courseService = courseService;
								}
								/**
								 * @param cid
								 * @param model
								 * @return
								 * url形式，查询字符串
								 * 通过注解设置访问的路径：http://127.0.0.1:8080/SpringMVC_AnnotationBasicInformation/courses/view？cid=1
								 * 设置访问的方式为get
								 */
								@RequestMapping(value="/view",method=RequestMethod.GET)
								public String viewCourse(@RequestParam("cid")int cid,Model model){
									Course course=courseService.getCoursebyId(1);
									model.addAttribute("infor",course.getCname());
									System.out.println("执行了");
									return "courser_overview";
								}
								/**
								 * 
								 * @param cid
								 * @param model
								 * @return
								 * rest风格的url
								 * 设置访问路径：http://127.0.0.1:8080/SpringMVC_AnnotationBasicInformation/courses/view2/345
								 * 
								 */
								@RequestMapping(value="/view2/{cid}",method=RequestMethod.GET)
								public String viewCourse2(@PathVariable("cid")int cid,Map<String,Object> model){
									Course course=courseService.getCoursebyId(cid);
									model.put("infor", course.getCname());
									return "courser_overview";
								}
								
								/**
								 * 
								 * @param request
								 * @return
								 * 
								 * 设置访问路径：http://127.0.0.1:8080/SpringMVC_AnnotationBasicInformation/courses/view3?cid=3
								 * 
								 */
								@RequestMapping(value="view3")
								public String viewCourse3(HttpServletRequest request){
									int cid=Integer.parseInt(request.getParameter("cid"));
									Course course=courseService.getCoursebyId(cid);
									System.out.println(course);
									request.setAttribute("infor", "request");
									return "courser_overview";
								}
							}
				
				
				6）数据绑定（模型）：
						controller：
							//模型
							//@ModelAttribute  可以没有
							@RequestMapping(value="/save",method=RequestMethod.POST)
							public String doSave(@ModelAttribute Course course){
								System.out.println(course.getCname());
								return "courser_overview";
							}
							
							
				7）文件上传：
						
	
						
												